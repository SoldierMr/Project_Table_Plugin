;(function(undefined){
    "use strict"
    var _global;
    var txtArr; //全局变量,存储文字
    var tempData;   //全局变量,存储对象
    //对象合并
    function extend(o,n,override) {
        for(var key in n){
            if(n.hasOwnProperty(key) && (!o.hasOwnProperty(key) || override)) {
                o[key] = n[key];
            }
        }
        return o;
    }
    //判断是否有类名存在
    function hasClass(obj, cls){
        var obj_class = obj.className;
        var obj_class_lst = obj_class.split(/\s+/);
        var x = 0;
        for(x in obj_class_lst) {
            if(obj_class_lst[x] == cls) {
                return true;
            }
        }
        return false;
    }
    //构造函数 -- 返回数组结构
    function RightClickText(){
    }
    RightClickText.prototype = {
        constructor:this,
        // 初始化节点
        _initial:function(opt) {
            var def = {
                tableId: null,//table的id
                selectClass: null,
                bgClass: null,
                menuId: null,//menu的id
                oldDataSource: []
            };
            this.def = extend(def,opt,true);
            this.css();
            if(!this._existNode(this.def.menuId)) {
                this.createNewNode();
            }
            this.rightDom(this.def.menuId);
            this.btnClick();
        },
        moveUp:function(_a) {
            var that_ = this;
            var _row = _a;
            var _node = _row.previousElementSibling;
            while(_node && _node.nodeType != 1){
                _node = _node.previousElementSibling;
            }
            if(_node){
                that_.swapNode(_row,_node);
            }
        },
        moveDown:function(_a) {
            var that_ = this;
            var _row = _a;
            var _node = _row.nextElementSibling;
            while(_node && _node.nodeType != 1){
                _node = _node.nextElementSibling;
            }
            if(_node){
              that_.swapNode(_row,_node);
            }
        },
        swapNode:function(node1,node2) {
            //获取父结点
            var _rowIndex = node1.childNodes[1].innerHTML;
            var _nodeIndex = node2.childNodes[1].innerHTML;
            node1.childNodes[1].innerHTML = _nodeIndex;
            node2.childNodes[1].innerHTML = _rowIndex;
            var _parent = node1.parentNode;   //获取两个结点的相对位置
            var _t1 = node1.nextElementSibling;
            var _t2 = node2.nextElementSibling;   //将node2插入到原来node1的位置
            if(_t1)_parent.insertBefore(node2,_t1); else _parent.appendChild(node2); //将node1插入到原来node2的位置
            if(_t2)_parent.insertBefore(node1,_t2); else _parent.appendChild(node1);
        },
        // 交换数组元素
        swapItems:function(arr, index1, index2) {
            var ts_ = this;
            var temp1 = JSON.parse(JSON.stringify(arr[index1]));
            var temp2 = JSON.parse(JSON.stringify(arr[index2]));
            ts_.traverseItems(arr[index1],temp2);
            ts_.traverseItems(arr[index2],temp1);
            return arr;
        },
        //上移交换数组对象
        upRecord:function(arr, $index) {
            var _that = this;
            if($index == 0) return;
            _that.swapItems(arr, $index, $index - 1);
        },
        traverseItems:function($arr, item) {
            var $arrInd  = void 0,
                $itemInd = void 0;
            for($arrInd in $arr) {
                for($itemInd in item) {
                    if($arrInd == $itemInd) {
                        $arr[$arrInd] = item[$itemInd];
                        break;
                    }
                }
            }
        },
        //下移交换数组对象
        downRecord:function(arr, $index) {
            var that_ = this;
            if($index == arr.length -1) return;
            that_.swapItems(arr, $index, $index + 1);
        },
        //存在数据
        exist:function(g_Id,g_Class,g_bClass) {
            var TempId = [];
            var UId = document.getElementById(g_Id).getElementsByClassName(g_Class)[0].childNodes[0];
            var CId = UId.getElementsByClassName(g_bClass)[0];
            var TId = UId.childNodes[0].childNodes;
            TempId.push(UId,CId,TId);
            return TempId;
        },
        //判断是否已经存在着节点
        _existNode:function(g_Id) {
            var gId = document.getElementById(g_Id);
            if(gId) return true; else return false;
        },
        //创建节点
        createNewNode:function() {
            var btnTextArr = ['复制', '黏贴', '上移(w)', '下移(s)'];
            var btnIdArr  = ['copyNode', 'pasteNode', 'upNode', 'downNode'];
            var btnHtml = '<button class="tempButton"></button>';
            var divHtml = '<div style="width:100%;height:100%"></div>';
            var btnStr = '';
            var body = document.getElementsByTagName('body')[0];
            var tempDiv = document.createElement('div');
            btnTextArr.forEach(function (item, index) {
                btnStr += btnHtml.replace('></button>', function () {
                    return 'id="' + btnIdArr[index] + '"></button>';
                }).replace('</button>', item + '</button>');
            });
            tempDiv.id = 'menu';
            tempDiv.setAttribute('class','tempDiv');
            tempDiv.innerHTML = divHtml.replace('</div>',btnStr + '</div>');;
            body.appendChild(tempDiv);
        },
        //右键点击
        rightDom:function(g_newId) {
            var thi_ = this;
            var dvdom = document.getElementsByTagName('body')[0]; //源节点Id
            var cvdom = document.getElementById(g_newId); //右键菜单Id
            dvdom.addEventListener('mousedown',function(event) {
                var e = event || window.event;
                var w = e.clientX;
                var h = e.clientY;
                var t = e.target;
                var p = t.parentNode.parentNode;
                var y = t.tagName.toLowerCase();
                var c = (y == 'textarea') ? p.parentNode.childNodes : p.childNodes;
                if((y == 'p' || y == 'td' || y == 'textarea') && e.button == 2) {
                        cvdom.style.display = 'block';
                        cvdom.style.top = (h+5)+'px';
                        cvdom.style.left = (w+5)+'px';
                }
            },false);
        },
        css:function() {
            var cssStyle = document.createElement('style');
            cssStyle.type ='text/css';
            var styleText =
            '.tempDiv{width:80px;height:140px;position:absolute;top:-400px;left:-200px;background: #444;z-index: 10;-webkit-box-shadow: 5px 5px 5px #888;-webkit-border-radius: 5px;box-shadow: 5px 5px 5px #888;border-radius: 5px;}' +
            '.tempButton{width:100%;height:25%;list-style-type:none;text-align:center;background:none;color:#fff;display: block;}' +
            '.tempButton:hover{color:rgb(67,184,30);}';
            cssStyle.innerHTML = styleText;
            document.getElementsByTagName('head')[0].appendChild(cssStyle);
        },
        //复制节点
        copy:function() {
            var _this = this;
            var tArr = _this.exist(_this.def.tableId,_this.def.selectClass,_this.def.bgClass);
            var cTdList = tArr[1].childNodes;
            var Arrindex = -1;
            tempData = '';
            txtArr = [];
            for(var i in cTdList) {
                if(i == 1) {
                    Arrindex = cTdList[i].innerText - 1;
                    break;
                }
            }
            _this.def.oldDataSource.forEach(function(data,index){
                if(index == Arrindex) {
                    tempData = JSON.stringify(data);
                    return;
                }
            })
            for(var j = 0; j < cTdList.length; j++) {
                if(j>1) {
                    txtArr.push(cTdList[j].innerText);
                }
            }
        },
        //黏贴节点
        paste:function() {
            var _this = this;
            var tArr = _this.exist(_this.def.tableId,_this.def.selectClass,_this.def.bgClass);
            var cTdList = tArr[1].childNodes;
            var newTempData = (tempData === undefined) ? {} : JSON.parse(tempData);
            var newTxtArr = (txtArr === undefined) ? [] : JSON.parse(JSON.stringify(txtArr));
            var Arrindex = -1;
            var dfind;
            var Arrlth = _this.def.oldDataSource.length; //数据源的长度
            if(newTempData){
                for(var i = 0;i<cTdList.length;i++) {
                    dfind = false;
                    if(i == 1) {
                        Arrindex = cTdList[i].innerText - 1;
                        dfind  = true;
                    }
                    if(dfind){
                        if(Arrindex >= Arrlth){
                            _this.def.oldDataSource.splice(Arrindex,1,newTempData);
                        }else{
                            _this.def.oldDataSource.forEach(function(data,index){
                                if(index == Arrindex) {
                                    Object.keys(data).forEach(function(dat,ind){
                                        Object.keys(newTempData).forEach(function(item,inde){
                                            if(dat == item) {
                                                data[dat] = newTempData[item];
                                            }
                                        });
                                    })
                                }
                            })
                        }
                    }
                }
            }
            if(newTxtArr.length > 0) {
                for(var j =0; j < cTdList.length; j++) {
                    if(j>1) {
                        for(var i= 0; i < newTxtArr.length; i++) {
                            if(j == (i+2)){
                                if(cTdList[j].className.indexOf('_global_displayNone') > -1){
                                    cTdList[j].nextElementSibling.innerText = newTxtArr[i];
                                    break;
                                }else{
                                    cTdList[j].innerText = newTxtArr[i];
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        },
        //上移
        up:function() {
            var _this = this;
            var tArr = _this.exist(_this.def.tableId,_this.def.selectClass,_this.def.bgClass);
            var cTdList = tArr[1].childNodes;
            var Arrindex = -1;
            for(var i in cTdList) {
                if(i == 1) {
                    Arrindex = cTdList[i].innerText - 1;
                    break;
                }
            }
            _this.moveUp(tArr[1]);
            _this.upRecord(_this.def.oldDataSource,parseInt(Arrindex));
        },
        //下移
        down:function() {
            var _this_ = this;
            var tArr = _this_.exist(_this_.def.tableId,_this_.def.selectClass,_this_.def.bgClass);
            var cTdList = tArr[1].childNodes;
            var Arrindex = -1;
            for(var i in cTdList) {
                if(i == 1) {
                    Arrindex = cTdList[i].innerText - 1;
                    break;
                }
            }
            _this_.moveDown(tArr[1]);
            _this_.downRecord(_this_.def.oldDataSource,parseInt(Arrindex));
        },
        //插入
        insert:function() {
            var _this = this;
            var tArr = _this.exist(_this.def.tableId,_this.def.selectClass,_this.def.bgClass);
            var cTdList = tArr[1].childNodes;
            var Arrindex = -1;
            var cloneNewNode = void 0;
            for(var i = 0;i<tArr[2].length;i++) {
                if(hasClass(tArr[2][i],'_global_trSelectBgColor')) {
                    var cloneNewNode = tArr[2][i].cloneNode(true);
                    for(var j = 0; j < cloneNewNode.childNodes.length; j++) {
                        if(j == 1) cloneNewNode.childNodes[j].innerText = (tArr[2].length+1);
                        if(j > 1) cloneNewNode.childNodes[j].firstElementChild.innerText = '';
                    }
                    Arrindex = i;
                    tArr[0].childNodes[0].insertBefore(cloneNewNode,tArr[2][i]);
                    break;
                }
            }
            _this.def.oldDataSource.forEach(function(data,index){
                if(index == Arrindex) {
                    var dataObj = new Object();
                    Object.keys(data).forEach(function(item,indx){
                        dataObj[item] = '';
                    });
                    _this.def.oldDataSource.splice(Arrindex,0,dataObj);
                    return;
                }
            })
        },
        //点击菜单栏按钮
        btnClick:function() {
            var this_ = this;
            document.getElementById('pasteNode').onmousedown = function(){
                this_.paste();
            }
            document.getElementById('copyNode').onmousedown = function(){
                this_.copy();
            }
            // document.getElementById('insertNode').onmousedown = function(){
            //     this_.insert();
            // }
            document.getElementById('upNode').onmousedown = function(){
                this_.up();
            }
            document.getElementById('downNode').onmousedown = function(){
                this_.down();
            }
            document.onkeydown = function(event) {
                var e = event || window.event || arguments.callee.caller.arguments[0];
                if(e && e.keyCode == '87') this_.up();  //上移
                if(e && e.keyCode == '83') this_.down();    //下移
                // if(e && e.ctrlKey && e.keyCode == '67') this_.copy();   //复制
                // if(e && e.ctrlKey && e.keyCode == '86') this_.paste();  //黏贴
                // if(e && e.ctrlKey && e.keyCode == '84') this_.insert(); //插入
            }
        }
    }
    // 最后将插件对象暴露给全局对象
    _global = (function(){ return this || (0, eval)('this'); }());
    if (typeof module !== "undefined" && module.exports) {
        module.exports = RightClickText;
    } else if (typeof define === "function" && define.amd) {
        define(function(){ return RightClickText;});
    } else {
        !('RightClickText' in _global) && (_global.RightClickText = RightClickText);
    }
}());